#include<iostream>
#include<math.h>
#include<string>
#include"windows.h"
using namespace std;

/** \brief
 *
 * \param STD_OUTPUT_HANDLE
 * \return HANDLE hCon=
 *
 */
HANDLE hCon = GetStdHandle(STD_OUTPUT_HANDLE);
int K[4][4]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}; //cái này để biểu diễn 0 hoặc 1 trên bìa K
int Temp[4][4]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}; //mảng dùng để đánh dấu ô nào là 1, ô nào là 0
int L[4][4]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}; //cái này để đánh dấu ô nào khoanh ô nào chưa khoanh, 0 là chưa khoanh, 1 là đã khoanh
string result[16];
int l=0;  //số phần tử của result
//ham check 2^n, OK
bool check2n(int x,int y,int x1,int y1,int s)
{
	int sub1=x-x1;
	if(sub1<0) sub1=0-sub1;
	sub1++;
	int sub2=y-y1;
	if(sub2<0) sub2=0-sub2;
	sub2++;
	return (sub1*sub2)==s;
}
//check một vùng gồm toàn số 1, trong đó có cả đã khoanh và chưa khoanh, nếu có cả chưa khoanh thì khoanh
 //nếu toàn đã khoanh thì thôi
bool complexArea(int x,int y, int x1,int y1) //check vùng có cả ô đã khoanh và chưa khoanh
{
	for(int i=x;i<=x1;i++)
		{
			for(int j=y;j<=y1;j++)
				if(L[i][j]==0) return true;
		}
		return false;
}
//ham check xem các ô trong phạm vi cho trước có khoanh được hay không OK
bool check1andNotRounded(int x,int y, int x1,int y1)
{
	for(int i=x;i<=x1;i++)
		{
			for(int j=y;j<=y1;j++)
				if(K[i][j]==0) return false;
		}
	return complexArea(x,y,x1,y1);
}
//hàm để check xem xung quanh ô có tọa độ (x,y) có thể khoanh cùng với ô nào hay không
bool couldLink(int x, int y)
{

}
//hàm để check xem có trường hợp nào khoanh tốt hơn trường hợp (x,y) ->(x1,y1) hay không. true=Yes, false=No
bool haveBetter(int x, int y, int x1, int y1)
{
	if(L[x][y])
		{
			    if(y==y1)
					{
						if(y1<=2)
		                {
			                if(!L[x1][y1]&&!L[x1][y1+1]&&K[x1][y1+1]) return true;
		                }
	                     if(y1>=1)
		                 {
		             	      if(!L[x1][y1]&&!L[x1][y1-1]&&K[x1][y1-1]) return true;
		                 }
	                     if(x1<=2)
			         	{
					    	if(!L[x1][y1]&&!L[x1+1][y1]&&K[x1+1][y1]) return true;
				        }
					}
				 if(x==x1)
					{
						if(y1<=2)
		                {
			                if(!L[x1][y1]&&!L[x1][y1+1]&&K[x1][y1+1]) return true;
		                }
	                     if(x1<=2)
			         	{
					    	if(!L[x1][y1]&&!L[x1+1][y1]&&K[x1+1][y1]) return true;
				        }
					}

		}
		if(L[x1][y1])
			{
				if(x==x1)
				if(x<=2)
					{
						if(!L[x+1][y]&&!L[x][y]&&K[x+1][y]) return true;
					}
			}
			if(!L[x][y]&&!L[x1][y1])
				{
					if(x==x1)
						{
								if(x<=2&&y1<=2&&!L[x+1][y]&&!L[x][y1+1]&&K[x+1][y]&&K[x][y1+1]) return true;
						}

				}
	return false;
}
//for 4 cells
bool haveBetter4(int x, int y, int x1, int y1)
{
    if(x!=x1&&L[x][y]==1&L[x][y+1]==1)
        {
            int check1=0; //check 4 ô hàng dưới là chưa khoanh
            int check2=0;//check  2 ô ở dưới hàng x1 là chưa khoanh
             if(K[x1][1]==1&&K[x1][2]==1&&K[x1][3]==1&&K[x1][0]==1&&L[x1][0]==0&&L[x1][1]==0&&L[x1][2]==0&&L[x1][3]==0) check1=1;
             if(x1+1<4)
                {
                    if(K[x1][y]==1&&K[x1][y1]==1&&K[x1+1][y]==1&&K[x1+1][y1]==1&&L[x1][y]==0&&L[x1][y1]==0&&L[x1+1][y]==0&&L[x1+1][y1]==0) check2=1;
                }
            if(check1==1||check2==1) return true;
        }

         if(x!=x1&&L[x][y]==1&L[x1][y]==1)
            {
                if(y1<3)
                    {
                        if(K[x][y1+1]==1&&L[x][y1+1]==0&&K[x1][y1+1]==1&&L[x1][y1+1]==0&&L[x1][y1]==0&&L[x][y1]==0)return true;
                     }
            }
            if(x==0&&x1==1&&L[x1][y]==0&&L[x][y]==0)
                {
                    for(int i=0;i<4;i++)
                        {
                            if(K[i][y]==0) return false;
                        }
                    if(y1<3)
                        {
                             if(K[x][y1+1]==1&&L[x][y1+1]==0&&K[x1][y1+1]==1&&L[x1][y1+1]==0&&L[x1][y1]==0&&L[x][y1]==0)return true;
                        }
                }
                //delete under staments if necessery
                if(L[x][y]==1&&L[x1][y]==1)
                    {
                        if(y1<=3)
                            {
                                for(int i=0;i<4;i++)
                                {
                                     if(K[i][y1]==0) return false;
                                }
                                 return true;
                            }

                    }
        return false;
}
string getString(int x,int y,int x1,int y1, int s)
{
	if(s==16) return "1";
	if(s==8)
		{
			if(x==0&&y==0)
				{
					if(x1==1&&y1==3) return "c";
			        else return "a";
				}
				if(x==0&&y==1) return "B";
				if(x==1&&y==0) return "D";
				if(x==0&&y==2) return "A";
				if(x==2&&y==0) return "C";
		}
		if(s==4)
			{
				if(x==0&&y==0&&x1==x) return "cd";
				if(x==1&&y==0&&x1==x) return "cD";
				if(x==2&&y==0&&x1==x) return "CD";
				if(x==3&&y==0&&x1==x) return "Cd";

				if(x==0&&y==0&&y1==y) return "ab";
				if(x==0&&y==1&&y1==y) return "aB";
				if(x==0&&y==2&&y1==y) return "AB";
				if(x==0&&y==3&&y1==y) return "Ab";
				if(x==0&&y==0) return "ac";
		        if(x==0&&y==1) return "Bc";
		        if(x==0&&y==2) return "Ac";
		        if(x==1&&y==0) return "aD";
		        if(x==1&&y==1) return "BD";
		        if(x==1&&y==2) return "AD";
		        if(x==2&&y==0) return "aC";
		        if(x==2&&y==1) return "BC";
		        if(x==2&&y==2) return "AC";
			}
		if(s==2)
			{
				if(x==0&&y==0)
				    if(x1==x) return "acd";
		            else return "abc";
		        if(x==0&&y==1)
		            if(x1==x) return "Bcd";
		            else return "aBc";
		        if(x==0&&y==2)
		            if(x1==x) return "Acd";
		            else return "ABc"; //done
				if(x==0&&y==3)
					return "Abc";
		        if(x==1&&y==0)
		            if(x1==x) return "acD";
		            else return "abD";//done
		        if(x==1&&y==1)
		            if(x1==x) return "BcD";
		            else return "aBD";//done
		        if(x==1&&y==2)
		            if(x1==x) return "AcD";
		            else return "ABD";
				if(x==1&&y==3)
					return "AbD";
		        if(x==2&&y==0)
		            if(x1==x) return "aCD";
		            else return "abC";//done
		        if(x==2&&y==1)
		            if(x1==x) return "BCD";
		            else return "aBC";
		        if(x==2&&y==2)
		            if(x1==x) return "ACD";
		            else return "ABC";
		            if(x==2&&y==3)
					return "AbC";
		            //
				   if(x==3&&y==0)
		           return "aCd";

					if(x==3&&y==1)
		            return "BCd";

					if(x==3&&y==2)
		            return "ACd";
			}
			if(s==1)
				{
					if(x==0&&y==0) return "abcd";
			        if(x==0&&y==1) return "aBcd";
			        if(x==0&&y==2) return "ABcd";
			        if(x==0&&y==3) return "Abcd";//done
			        if(x==1&&y==0) return "abcD";
			        if(x==1&&y==1) return "aBcD";//
			        if(x==1&&y==2) return "ABcD";
			        if(x==1&&y==3) return "AbcD";

			        if(x==2&&y==0) return "abCD";
			        if(x==2&&y==1) return "aBCD";
			        if(x==2&&y==2) return "ABCD";
			        if(x==2&&y==3) return "AbCD";
			        if(x==3&&y==0) return "abCd";
			        if(x==3&&y==1) return "aBCd";
			        if(x==3&&y==2) return "ABCd";
			        if(x==3&&y==3) return "AbCd";
				}
}
bool check1(int i, int j)
{
	return K[i][j]==1;
}
//check nguyên bìa, cái nào khoanh được thì khoanh, xử lý chuỗi sau
void checkAll(int s)
    {
        if (s==0) return;
        if(s==1)
        {
            for(int i=0;i<4;i++)
            {
                for(int j=0;j<4;j++)
                {
                    if(check1(i,j))
                    {
                        if(L[i][j]==0)
                        {
                            result[l++]=getString(i,j,i,j,1);
                            L[i][j]=1;
                        }

                    }
                }
            }
            return;
        }
        else
        {
            if(s<=8)
            {
                if(s==8)
                {
                    if(check1andNotRounded(0,0,0,3)&&check1andNotRounded(3,0,3,3))
                    {
                        //round and mark as 1
                        result[l++]="d";
                        for(int i=0;i<4;i++)
                        {
                            L[0][i]=L[3][i]=1;
                        }
                    }
                    if(check1andNotRounded(0,0,3,0)&&check1andNotRounded(0,3,3,3))
                    {
                        //round and mark as 1
                        result[l++]="b";
                        for(int i=0;i<4;i++)
                        {
                            L[i][0]=L[i][3]=1;
                        }
                    }
                }
                else
                {
                    if(s==4)
                    {
                        if(K[0][0]==1&&K[1][0]==1&&K[0][3]==1&&K[1][3]==1&&(L[0][0]==1&&L[1][0]==1&&L[0][3]==1&&L[1][3]==1)==false)
                        {
                            //round and mark as 1
                            result[l++]="bc";
                            L[0][0]=L[1][0]=L[0][3]=L[1][3]=1;
                        }
                        if(K[1][0]==1&&K[2][0]==1&&K[1][3]==1&&K[2][3]==1&&(L[1][0]==1&&L[2][0]==1&&L[1][3]==1&&L[2][3]==1)==false)
                        {
                            //round and mark as 1
                            result[l++]="bD";
                            L[1][0]=L[2][0]=L[1][3]=L[2][3]=1;
                        }
                        if(K[2][0]==1&&K[3][0]==1&&K[2][3]==1&&K[3][3]==1&&(L[2][0]==1&&L[3][0]==1&&L[2][3]==1&&L[3][3]==1)==false)
                        {
                            //round and mark as 1
                            result[l++]="bC";
                            L[2][0]=L[3][0]=L[2][3]=L[3][3]=1;
                        }
                        if(K[0][0]==1&&K[3][0]==1&&K[0][3]==1&&K[3][3]==1&&(L[0][0]==1&&L[3][0]==1&&L[0][3]==1&&L[3][3]==1)==false)
                        {
                            //round and mark as 1
                            result[l++]="bd";
                            L[0][0]=L[3][0]=L[0][3]=L[3][3]=1;
                        }
                        if(K[0][0]==1&&K[0][1]==1&&K[3][0]==1&&K[3][1]==1&&(L[0][0]==1&&L[0][1]==1&&L[3][0]==1&&L[3][1]==1)==false)
                        {
                            //round and mark as 1
                            result[l++]="ad";
                            L[0][0]=L[0][1]=L[3][0]=L[3][1]=1;
                        }
                        if(K[0][1]==1&&K[0][2]==1&&K[3][1]==1&&K[3][2]==1&&(L[0][1]==1&&L[0][2]==1&&L[3][1]==1&&L[3][2]==1)==false)
                        {
                            //round and mark as 1
                            result[l++]="Bd";
                            L[0][1]=L[0][2]=L[3][1]=L[3][2]=1;
                        }
                        if(K[0][2]==1&&K[0][3]==1&&K[3][2]==1&&K[3][3]==1&&(L[0][2]==1&&L[0][3]==1&&L[3][2]==1&&L[3][3]==1)==false)
                        {
                            //round and mark as 1
                            result[l++]="Ad";
                            L[0][2]=L[0][3]=L[3][2]=L[3][3]=1;
                        }
                    }
                    else
                    if(s==2)
                    {
                        if(K[0][0]==1&&K[0][3]==1&&(L[0][0]==1&&L[0][3]==1)==false)
                        {
                            result[l++]="bcd";
                            L[0][0]=L[0][3]=1;
                        }
                        if(K[1][0]==1&&K[1][3]==1&&(L[1][0]==1&&L[1][3]==1)==false)
                        {
                            if(K[2][0]==1&&L[2][0]==0&&K[0][3]==1&&L[0][3]==0)
                            {
                                //do nothing
                            }
                            else
                            if(K[0][0]==1&&L[0][0]==0&&K[2][3]==1&&L[2][3]==0)
                            {
                                //do nothing
                            }
                            else
                                {
                                    result[l++]="bcD";
                                    L[1][0]=L[1][3]=1;
                                }
                        }
                        if(K[2][0]==1&&K[2][3]==1&&(L[2][0]==1&&L[2][3]==1)==false)
                        {
                            if(K[3][0]==1&&L[3][0]==0&&K[1][3]==1&&L[1][3]==0)
                            {
                                //do nothing
                            }
                            else
                            if(K[1][0]==1&&L[1][0]==0&&K[3][3]==1&&L[3][3]==0)
                            {
                                //do nothing
                            }
                            else
                            {
                                result[l++]="bCD";
                                L[2][0]=L[2][3]=1;
                            }

                        }
                        if(K[3][0]==1&&K[3][3]==1&&(L[3][0]==1&&L[3][3]==1)==false)
                        {
                            result[l++]="bCd";
                            L[3][0]=L[3][3]=1;
                        }
                        if(K[0][0]==1&&K[3][0]==1&&(L[0][0]==1&&L[3][0]==1)==false)
                        {
                            result[l++]="abd";
                            L[0][0]=L[3][0]=1;
                        }
                        if(K[0][1]==1&&K[3][1]==1&&(L[0][1]==1&&L[3][1]==1)==false)
                        {
                            if(K[0][0]==1&&L[0][0]==0&&K[3][2]==1&&L[3][2]==0)
                            {
                                //do nothing
                            }
                            else
                            if(K[0][2]==1&&L[0][2]==0&&K[3][0]==1&&L[3][0]==0)
                            {
                                //do nothing
                            }
                            else
                                {
                                    result[l++]="aBd";
                                    L[0][1]=L[3][1]=1;
                                }
                        }
                        if(K[0][2]==1&&K[3][2]==1&&(L[0][2]==1&&L[3][2]==1)==false)
                        {
                            if(K[0][1]==1&&L[0][1]==0&&K[3][3]==1&&L[3][3]==0)
                            {
                                //do nothing
                            }
                            else
                            if(K[0][3]==1&&L[0][3]==0&&K[3][1]==1&&L[3][1]==0)
                            {
                                //do nothing
                            }
                            else
                            {
                                result[l++]="ABd";
                                L[0][2]=L[3][2]=1;
                            }
                        }
                        if(K[0][3]==1&&K[3][3]==1&&(L[0][3]==1&&L[3][3]==1)==false)
                        {
                            result[l++]="Abd";
                            L[0][3]=L[3][3]=1;
                        }
                    }
                }
            }
            for(int x=0;x<4;x++)
                for(int y=0;y<4;y++)
                {
                    for(int x1=x;x1<4;x1++)
                        for(int y1=y;y1<4;y1++)
                            if(check2n(x,y,x1,y1,s))
                            {
                                if(check1andNotRounded(x,y,x1,y1))
                                {
                                    //them kết quả là một chuỗi gì đó vào result( thêm rồi phần sau sẽ xử lí sau)
                                    //sau đó đánh dấu tất cả những ô đó là đã khoanh
                                    if(s==2)
                                    {
                                        if(haveBetter(x,y,x1,y1)) continue;
                                        else
                                        {
                                            result[l++]=getString(x,y,x1,y1,s);
                                            for(int i=x;i<=x1;i++)
                                                for(int j=y;j<=y1;j++)
                                                {
                                                    L[i][j]=1;
                                                }
                                        }
                                    }
                                    else
                                    if(s==4)
                                        {
                                            if(haveBetter4(x,y,x1,y1)==true) continue;
                                            else
                                                {
                                                     result[l++]=getString(x,y,x1,y1,s);
                                                     for(int i=x;i<=x1;i++)
                                                     for(int j=y;j<=y1;j++)
                                                    {
                                                         L[i][j]=1;
                                                    }
                                                }
                                        }
                                    else
                                    {
                                        result[l++]=getString(x,y,x1,y1,s);
                                        for(int i=x;i<=x1;i++)
                                            for(int j=y;j<=y1;j++)
                                            {
                                                L[i][j]=1;
                                            }
                                    }
                                }
                            }
                }
            checkAll(s/2);
        }
    }
void addToKmap(int x)
{
	if(x==0) K[0][0]=Temp[0][0]=1;
	else
	if(x==1) K[1][0]=Temp[1][0]=1;
	else
	if(x==2) K[3][0]=Temp[3][0]=1;
	else
	if(x==3) K[2][0]=Temp[2][0]=1;
	else
	if(x==4) K[0][1]=Temp[0][1]=1;
	else
	if(x==5) K[1][1]=Temp[1][1]=1;
	else
	if(x==6) K[3][1]=Temp[3][1]=1;
	else
	if(x==7) K[2][1]=Temp[2][1]=1;
	else
	if(x==8) K[0][3]=Temp[0][3]=1;
	else
	if(x==9) K[1][3]=Temp[1][3]=1;
	else
	if(x==10) K[3][3]=Temp[3][3]=1;
	else
	if(x==11) K[2][3]=Temp[2][3]=1;
	else
	if(x==12) K[0][2]=Temp[0][2]=1;
	else
	if(x==13) K[1][2]=Temp[1][2]=1;
	else
	if(x==14) K[3][2]=Temp[3][2]=1;
	else
	if(x==15) K[2][2]=Temp[2][2]=1;
}
void showString(string s)
{
	for(int i=0;i<s.size();i++)
		{
			if(s[i]>96) cout<<(char)((int)s[i]-32)<<"'";
	        else cout<<s[i];
		}
}
void showResult()
{
	for(int i=0;i<l-1;i++)
		{
			showString(result[i]);
			cout<<"+";
        }
       if(l-1>=0) showString(result[l-1]);
       cout<<endl;
}
void showKmap()
{
	int A[]={0,4,12,8,1,5,13,9,3,7,15,11,2,6,14,10};
	cout<<"_____________     ____________\n";
	for(int i=0;i<4;i++)
	{
		for(int j=0;j<4;j++)
		{
			if(i>=2&&j==3)
				cout<<A[4*i+j]<<"|";
			else
			cout<<A[4*i+j]<<" |";
		}
		cout<<"    |";
		for(int j=0;j<4;j++)
		{
			cout<<Temp[i][j]<<" |";
		}
		cout<<endl;
		if(i<=2)
			cout<<"_____________     ___________\n";
		else
			cout<<"-------------    -------------\n";
   	}
	cout<<endl;
}
void reset()
{
	for(int i=0;i<4;i++)
		{
			for(int j=0;j<4;j++)
				{
					K[i][j]=L[i][j]=Temp[i][j]=0;
				}
		}
		l=0;
}
//============Xoa noi dung tren man hinh console
void cls( HANDLE hConsole )
{
   COORD coordScreen = { 0, 0 };    // home for the cursor
   DWORD cCharsWritten;
   CONSOLE_SCREEN_BUFFER_INFO csbi;
   DWORD dwConSize;

// Get the number of character cells in the current buffer.

   if( !GetConsoleScreenBufferInfo( hConsole, &csbi ))
      return;
   dwConSize = csbi.dwSize.X * csbi.dwSize.Y;

   // Fill the entire screen with blanks.

   if( !FillConsoleOutputCharacter( hConsole, (TCHAR) ' ',
      dwConSize, coordScreen, &cCharsWritten ))
      return;

   // Get the current text attribute.

   if( !GetConsoleScreenBufferInfo( hConsole, &csbi ))
      return;

   // Set the buffer's attributes accordingly.

   if( !FillConsoleOutputAttribute( hConsole, csbi.wAttributes,
      dwConSize, coordScreen, &cCharsWritten ))
      return;

   // Put the cursor at its home coordinates.

   SetConsoleCursorPosition( hConsole, coordScreen );
}
void clrscr()
{
    cls(hCon);
}
//=================================================
//2 variables karnaugh map

int main()
{

	 while(true)
		{
			cout<<"Nhap nhung o duoc danh dau la 1, nhap -1 de xem ket qua:\n";
			showKmap();
	       int x=0;
	       while(x!=-1)
		   {
			cin>>x;
	        if(x!=-1)
				{
					if(x<16&&x>-1)
						{
							addToKmap(x);
							clrscr();
							cout<<"Nhap nhung o duoc danh dau la 1, nhap -1 de xem ket qua:\n";
			                showKmap();
						}
					else
						{
							cout<<"so o phai <16 va >-1, vui long nhap lai: ";
					    }
				}
        }
		checkAll(16);
        cout<<"\nBieu thuc can xac dinh la: ";showResult();
        cout<<endl;
        reset();
        int stopScreen;
        cout<<"Nhap 1 de tiep tuc, nhap 2 de thoat: ";
        cin>>stopScreen;
        if(stopScreen==1)
        clrscr();
        else return 0;
       // showKmap();
		}
	  return 0;
}

